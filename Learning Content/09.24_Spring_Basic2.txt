1. 스프링 세팅2
 - LOMBOK 라이브러리 (getter, setter, tostring..등 반복작업 어노테이션 처리)
   - maven repository - lombok 검색 - 최신 버전에서 maven 소스 카피
   - pom.xml에 추가 빌드 프로그레스바 확인
   - setting.xml 의 maven repository로 가서 <dependencies>의 롬복 경로 따라가서
   - lombok-version.jar 더블 클릭하면 고추 그림 있는 installer 나오는지 확인
   - IDE's 에 목록(Eclipse, STS)이 없다면
     - Specify location에 STS.exe가 설치된 경로로 와서 STS.exe 클릭 후 select해주면 됨
   - @Getter, @Setter, @Tostring,, @Data -> getter + setter + tostring
   - @AllArgsConstructor, @NoArgsConstructor
   - @Builder
 - 템플릿 설정
   - 프로젝트 안에 .metadata - .sts - .content - ....vc-3.2.2 안에 템플릿 .zip을
     - 프로젝트 오른쪽 클릭 - properties - resources 안에 프로젝트 이름 옆에..
   - 오른쪽 클릭 해서 template 안에 압축 풀기
   - pom.xml
   - 앞에 셋팅처럼 1.8 ... lombok 등 추가하고
   - <groupId>org.apache.maven.plugins</groupId> 에 <version>3.1</version>
   - <!-- Servlet -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet.jsp-api</artifactId>
			<version>3.1.0</version>
			<scope>provided</scope>
		</dependency>
    <dependency>
		  <groupId>javax.servlet.jsp</groupId>
			<artifactId>javax.jsp-api</artifactId>
			<version>2.3.1</version>
			<scope>provided</scope>
		</dependency>
   - template - src - main - webapp - WEB-INF - lib(jstl라이브러리 있음) 복사하기
   - web.xml에 <web-app version="3.1" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_3_1.xsd">

2. Framework
 - 프레임워크 특징
 - 프레임워크 종류
   - 영속성 Framework
   - 자바 Framework
   - 화면 구현 Framework
   - 기능 및 지원 Framework

3. Maven
 - maven이란?
   - 자바용 프로젝트 관리 도구, project object model(POM) XML 문서를 통해
     해당 프로젝트 버전 정보 및 라이브러리 정보들을 통합하여 관리하는 프레임워크
 - 라이브러리 종속성
   - 일반적인 프로젝트는 개발자가 필요한 라이브러리를 직접 찾아서 추가해야 하지만
     Maven을 사용하면 pom.xml문서에 사용하고자 하는 라이브러리를 등록하여 자동으로 프로젝트에 추가
     라이브러리 관리의 편리성 제공
 - POM 이란?
   - POM(Project Object Model)은 하나의 프로젝트에서 사용하는 자바 버전, 라이브러리, 플러그인 구성을
     통합하여 관리할 수 있게 각 설정 정보를 XML로 문서화 한 것을 말한다.

4. Spring Framework
 - Spring Framework란?
   - 자바 플랫폼을 위한 오픈 소스 애플리케이션 프레임워크 - Spring
   - 동적인 웹 사이트를 개발하기 위한 여러 가지 서비스를 제공
 - Spring Framework의 특징
   - DI(Dependency Injection) : 의존성 주입
     - 설치 파일이나 어노테이션을 통해 객체간의 의존관계를 설정. 개발자가 직접 의존하는 객체 생성 필요 X
     - new 하는게 아니고 설정 파일, 어노테이션을 통해서 의존 관계 설정
   - Spring AOP(Aspect Oriented Programming) : 관점 지향 프로그래밍
     - 트랜잭션, 로깅, 보안 등 여러 모듈, 여러 계층에서 공통으로 필요로 하는 기능의 경우 해당 기능 분리하여 관리
   - POJO(Plain Old Java Object)
     - 일반적인 J2EE 프레임워크에 비해 특정 라이브러리를 사용할 필요 X -> 개발이 쉽다.
     - 기존 라이브러리의 지원이 용이하다.
   - IOC(Inversion of Control) : 제어 반전
     - 컨트롤의 제어권이 개발자가 아니라 프레임워크에 있다는 뜻
     - 객체의 생성부터 모든 생성 주기 관리까지 프레임워크가 주도
     - 객체를 생성하고, 직접 호출하는 프로그램이 아니라, 만들어둔 자원을 호출해서 사용
   - Spring 구성 모듈과 동작 구조..
   - Spring MVC 동작 처리 과정

5. Spring IOC (Inversion of Control)
 - IoC란?
   - 프로그램을 구동하는 데 필요한 객체에 대한 생성, 변경 등의 관리를 개발자가 아닌. 컨테이너에서 직접 관리
   - 스프링은 IoC 구조를 통해 구동 시 필요한 객체의 생성부터 생명주기까지
     해당 객체에 대한 관리를 직접 수행한다.
 - IoC 컨테이너
   - 스프링에서 관리하는 객체를 'Bean(빈)'이라고 하고, 해당 빈들을 관리한다는 의미로
     컨테이너를 'Bean Factory'라고 한다.
   - 기존에 new로 객체 할당하던 것을 Bean Factory가 해준다.
 - IoC 컨테이너의 역할
   - 객체의 생성주기와 의존성을 관리한다.
   - VO(DTO / POJO) 객체의 생성, 초기화, 소멸 등의 처리를 담당한다.
   - 개발자가 직접 객체를 생성할 수 있지만 해당 권한을 컨테이너에 맡김으로써
     소스 코드 구현의 시간을 단축할 수 있다.

6. Spring DI(Dependency Injection)
 - DI(의존성 주입) 란?
   - DI란 Dependency Injection의 약자로 IoC 구현의 핵심 기술이라고 할 수 있다.
   - 사용하는 객체를 직접 생성하여 만드는 것이 아니라 컨테이너가
     빈의 설정 정보를 읽어와 자동으로 해당 객체에 연결하는 것을 의미
   - 의존성을 주입 받게 되면 이후 해당 객체를 수정해야 할 상황이 발생 시 소스 코드 수정 최소화 가능
 - DI의 장점
   - 개발자가 작성해야 할 코드가 단순해진다.
   - 각 객체 간의 종속 관계(결합도)를 해소할 수 있다.
     - 객체 간의 종속 관계(결합도) : 한 클래스 내에서 필드 객체를 생성할 때 발생하는 두 객체 간의 관계.
       각 객체 간의 내용이 수정될 경우 영향을 미치는 정도.
 - Spring DI 종류
   - Setter 메소드를 통한 의존성 주입
     - 의존성을 주입 받는 Setter 메소드를 만들고, 이를 통해 의존성을 주입
   - 생성자를 통한 의존성 주입
     - 필요한 의존성을 포함하는 클래스에 생성자를 만들고, 이를 통해 의존성을 주입
   - 메소드를 통한 의존성 주입
     - 의존성을 입력 받는 일반 메소드를 만들고 이를 통해 의존성을 주입
