예외처리 (Exception)

오류
- 컴파일 에러 : 소스 상의 문법 Error
- 런타임 에러 : 입력 값이 틀렸거나, 배열의 인덱스 범위를 벗어났거나 계산식의 오류 등으로 인해 발생
- 논리 에러 : 문법상 문제가 없고 런타임에러도 발생하지 않지만 개발자의 의도대로 작동하지 않음 overflow
- 시스템 에러 : 컴퓨터 오작동으로 인한 에러 -> 소스 구문으로 해결 불가

Checked Exception과 Unchecked Exception

RuntimeException 클래스
- Unchecked Exception, 주로 프로그래머의 부주의로 인한 bug
Exception처리 보다는 코드를 수정해야 하는 경우가 많다
예외처리를 강제화 하지 않음
- ArithmeticException : 0으로 나누는 경우
- NullPointerException : Null인 ref.변수로 객체 멤버 참조 시도
- NegativeArraySizeException : 배열 크기를 음수로 지정한 경우
- ArrayIndexOutOfBoundException : 배열의 index 범위를 넘어서 참조하는 경우
- ClassCastException : Cast 연산자 사용시 타입 오류

Exception 처리 방법
- Exception 처리를 호출한 메소드에게 위임
책임 회피. 자신을 호출한 메소드에게 처리를 위임하여 해결
계속적으로 위임하면 main()까지 위임하게 되고 main()까지도 처리되지 않는 경우
JVM이 비정상 종료

- Exception을 발생한 곳에서 직접 처리
try~catch문을 이용하여 예외를 처리한다.
catch : try구문의 exception 발생시 exception 처리
여러 개 exception 처리가 가능하지만 exception간의 상속관계를 고려해야함

finally : exception 발생 여부에 관계 없이 꼭 처리해야 하는 logic
중간에 return을 만나도 finally는 무조건 실행

System.exit(0), System.gc() 사용할 수 있지만 하면 안되는 코드
gc = 가비지 콜렉터 호출

멀티 catch() 블록 사용 시
구체적인 타입이 위쪽으로 작성되야함 상속 관계 고려하여 최상위가 제일 아래로

반납해야 하는 자원이 있는 경우 try-with-resource 구문으로 처리
try() 괄호 안에서 객체 생성 가능하며, 여러 개도 생성 가능
자동으로 객체를 반납해준다.

오버라이딩 시 throws를 안해주어도 괜찮지만
같은 예외 형식이거나, 더 구체적인 예외형식이어야 한다.(더 상위 클래스는 안됌)
IOException을 override 할 때 Exception 은 불가 FileNotFoundException은 가능

예외가 발생한 곳에서는 던져주고 호출 한 곳에서는 처리 try-catch()