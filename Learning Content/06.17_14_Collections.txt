자료구조
데이터(자료)를 메모리에서 구조적으로 처리하는 방법론.

배열의 단점
- 한번 크기를 지정하면 변경 x
- 중간 위치 삽입 불편
- 한 타입의 데이터만 저장 가능

컬렉션의 장점
- 저장 크기 제약 x
- 추가, 삭제, 정렬 등의 기능처리가 간단
- 여러 타입 저장 가능

List 정렬
오름차순
Collections.sort(list);
내림차순
Iterator iter = new LinkedList(list).descendingIterator();
while(iter.hasNext()) {
	System.out.println(iter.next());
}
기존의 데이터 사용 불가함.
while(iter.hasNext()) {
	descList.add(iter.next());
}
새로운 리스트에 저장

제네릭을 설정해두면
ArrayList<Customer> list = new ArrayList<Customer>();
for(Customer obj : list) 사용가능
<Customer> 제네릭 설정 안해두면
for(Customer obj : list) 사용 불가 for(Object obj : list)로 사용
무조건 Customer가 나온다는 보장이 없으므로.

만약 필드 값 기준으로 오름차순/내림차순 정렬한다고 하면
오름차순 일 경우 obj1.fieldValue > obj2.fieldValue일때 return 값을 1로
내림차순 일 경우 그 반대로 

String 정렬
Comparator 인터페이스를 상속 받던지
list.sort(Comparator)에서 익명클래스를 작성.
이름 순 정렬은
comparator 인터페이스의 compare 메서드 return cob1.getName().compareTo(cob2.getName());
내림차순은 * -1


