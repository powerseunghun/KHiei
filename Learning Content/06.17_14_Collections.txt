자료구조
데이터(자료)를 메모리에서 구조적으로 처리하는 방법론.

배열의 단점
- 한번 크기를 지정하면 변경 x
- 중간 위치 삽입 불편
- 한 타입의 데이터만 저장 가능

컬렉션의 장점
- 저장 크기 제약 x
- 추가, 삭제, 정렬 등의 기능처리가 간단
- 여러 타입 저장 가능

List 정렬
오름차순
Collections.sort(list);
내림차순
Iterator iter = new LinkedList(list).descendingIterator();
while(iter.hasNext()) {
	System.out.println(iter.next());
}
기존의 데이터 사용 불가함.
while(iter.hasNext()) {
	descList.add(iter.next());
}
새로운 리스트에 저장

제네릭을 설정해두면
ArrayList<Customer> list = new ArrayList<Customer>();
for(Customer obj : list) 사용가능
<Customer> 제네릭 설정 안해두면
for(Customer obj : list) 사용 불가 for(Object obj : list)로 사용
무조건 Customer가 나온다는 보장이 없으므로.

만약 필드 값 기준으로 오름차순/내림차순 정렬한다고 하면
오름차순 일 경우 obj1.fieldValue > obj2.fieldValue일때 return 값을 1로
내림차순 일 경우 그 반대로 

String 정렬
Comparator 인터페이스를 상속 받던지
list.sort(Comparator)에서 익명클래스를 작성.
이름 순 정렬은
comparator 인터페이스의 compare 메서드 return cob1.getName().compareTo(cob2.getName());
내림차순은 * -1

Set은 중복 허용하지 않고, 저장 순서 유지가 안된다.
또 저장된 객체를 하나씩 꺼내는 기능이 없어서
- toArray() 메소드를 이용해 객체 배열로 변환 후 연속 처리.
- iterator() 메소드로 목록 만들어 처리 한다

Map은 키와 값을 쌍으로 저장하며 키와 값 둘 다 반드시 객체여야 한다.
값 객체 저장은 중복을 허용하지만 키는 중복을 허용하지 않는다.
만약 중복되는 키로 put된다면 최근 값으로 value를 덮어쓴다.
keySet을 만들어서 키만 set으로 만들고 iterator 메소드로 목록 만들어 연속 처리
Set set = hmap.keySet();
Iterator iter = set.iterator();
while(iter.hasNext()) {
	String key = (String) iter.next();
	String value = (String) hmap.get(key);
			
	System.out.println(key + " = " + value);
}

저장된 value 객체들만 values() 메소드로 Collection 으로 생성
Collection values = hmap.values();
// 2-1 iterator()로 목록 만들어서 처리
Iterator valueIter = values.iterator();

// 2-2 배열로 만들어서 처리
Object[] valueArr = values.toArray();

// 3. Map의 내부 클래스인 EntrySet을 이용
3-1
Set entrySet = hmap.entrySet();
Iterator entryIter = entrySet.iterator();
while(entryIter.hasNext()) {
	Map.Entry entry = (Entry) entryIter.next();
	System.out.println(entry.getKey() + " : " + entry.getValue());
}
3-2 Generics
Iterator<Map.Entry<String, String>> entryIter = entrySet.iterator();
		
while(entryIter.hasNext()) {
	Map.Entry<String, String> entry = entryIter.next();
	System.out.println(entry.getKey() + " : " + entry.getValue());
}