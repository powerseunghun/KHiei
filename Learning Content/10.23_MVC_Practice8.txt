1. 웹소켓
- HTTP 기반의 실시간 양방향 통신
  - host : port
  - 어기면 cross origin 발생
- 왜 홈페이지에서 실시간 양방향 통신을 해야하는가?
  - 사용자의 이용편의를 위한 실시간 정보갱신
  - 주식, 채팅, 실시간 알림, ...
- 이용자가 늘어날수록 서버에 엄청난 무리가 가므로 남용 금지
- Spring에서 WebSocket 관련 처리를 수행하는 서버
  - Controller와 별개로 작동한다.
	- 사용자 요청처리이므로 servlet-context.xml에 등록한다.
- 구현방법
  - 1. 상속을 받는다(interface WebsocketHandler, class TextWebSocketHandler, ..)
  - 2. 필요한 메소드를 재정의
    - afterConnectionEstablished : 연결이 수립된 직후 실행되는 메소드
    - handleTextMessage :
    - afterConnectionClosed : 연결이 종료된 직후 실행되는 메소드
   - 3. 서버를 servlet-context.xml에 등록

** 자료구조 **
Set : 일괄처리(속도 빠름) /트리구조/해시구조/중복허용 안함
      전체를 빠르게 관리/제어
Map : key-value, key가 set 형태인 저장소
      key를 빠르게 관리/제어
      key가 있으면 value는 자동으로 호출
List : 일렬로 배치해둔 저장소(선형구조)
       순서를 중요시하는 경우 사용
