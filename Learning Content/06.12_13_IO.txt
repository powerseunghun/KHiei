입출력이란
컴퓨터 내부 또는 외부 장치와 프로그램 간의 데이터를 주고 받는 것을 말한다.
장치와 입출력을 위해서는 하드웨어 장치에 직접 접근이 필요하고, 다양한 매체에
존재하는 데이터들이 사용하기 위해 입출력 데이터를 처리할 공통적인 방법으로 스트림을 이용한다.

스트림
입출력 장치에서 데이터를 읽고 쓰기 위하여 자바에서 제공하는 class
각각의 장치마다 연결할 수 있는 각각의 스트림이 존재한다.
단, 하나의 스트림으로 입출력을 동시에 수행할 수 없고, 입출력을 동시에
수행하려면 2개의 스트림이 필요하다.(단방향 통신)

InputStream
바이트 기반 입력 스트림의 최상위 클래스로 추상클래스
OutputStream
바이트 기반 출력 스트림의 최상위 클래스로 추상클래스

Reader
문자 기반 입력 스트림의 최상위 클래스로 추상클래스
Writer
문자 기반 출력 스트림의 최상위 클래스로 추상클래스

File
FileInputStream
파일로부터 바이트 단위로 읽어들일 때 사용함
객체 생성 시 파일이 존재하지 않으면 FileNotFoundException이 발생하므로
try-catch를 이용해 반드시 예외처리 해야한다.
FileOutputStream
파일로부터 바이트 단위로 저장할 때 사용
객체 생성 시 파일이 존재하지 않으면 자동 생성하고, 이미 존재한다면
덮어 쓰는 단점이 있다.
FileReader
텍스트 파일로부터 Character 단위로 읽어 들일 때 사용한다.
객체 생성 시 파일이 존재하지 않으면 FileNotFoundException이 발생하므로
try-catch를 이용해 반드시 예외처리 해야 한다.
FileWriter
텍스트 파일로부터 Character 단위로 저장할 대 사용한다.
파일이 존재하지 않으면 자동 생성, 파일이 존재하는 경우 덮어 쓴다.

보조스트림
스트림 기능 향상시키거나 새로운 기능을 추가하기 위해 사용.
실제 데이터를 주고받는 스트림이 아니기 때문에 입출력 처리를 할 수 없고
스트림을 먼저 생성한 다음 이를 이용해서 보조 스트림 생성해야함. 단독 사용 불가

문자 변환(Input/OutputStreamReader)
입출력 성능 향상(BufferedInput/OutputStream)
기본 데이터 타입 출력(DataInput/OutputStream)
객체 입 출력(ObjectInput/OutputStream)

직렬화(Serializable)
Serializable 인터페이스를 implements 하여 구현한다.
단, 객체 직렬화 시 private 필드를 포함한 모든 필드를 바이트로 변환하지만
transient 키워드를 사용한 필드는 직렬화에서 제외한다.
implements java.io.Serializable

역직렬화
직렬화된 객체를 역직렬화 할 때는 직렬화 했을 때와 같은 클래스를 사용한다.
하지만 클래스의 이름이 같더라도 클래스의 내용이 변경된 경우 역직렬화에 실패한다.

파일 생성 후 프로젝트 클릭 -> F5 새로고침 하면 .txt 파일 package explorer, navigator에 등장

FileOutputStream(".dat", true) 인자에 true가 주어질 경우 append 모드.



VO가 되기 위한 조건
1. 모든 필드가 private
2. 기본 생성자와 모든 필드 초기화 생성자 존재
3. 모든 필드에 대한 getter/setter 존재
4. 직렬화 되어있어야 함
[선택] toString() 메소드 오버라이딩

transient 키워드 -> 직렬화에서 뺌